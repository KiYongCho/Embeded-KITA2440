### 4/25 Java

# Java
* Sun microsystems라는 미국 회사에서 가전제품 등에서 사용할 임베디드 소프트웨어
  개발을 위해 만든 프로그래밍 언어
* 확장성, 보안성이 뛰어나 현재는 많은 분야에서 사용되는 대중적인 언어
* 장점
  - WORA(Write Once Run Anywhere)
    한번 코딩해서 여러곳에 사용 (한번 작성된 자바코드는 OS에 상관없이 실행 가능함)
  - 문법이 간결하고 배우기 쉽다.
  - 확장성, 모듈화, 보안성, 안정성이 매우 뛰어난 언어
* 단점
  - 속도가 느림 (하드웨어나 임베디드에 사용하기는 어려운 언어)
  - 하드웨어에 대한 직접적인 컨트롤 하기 어려움
* 현재는 오라클사에서 판권을 가지고 배포/운용 하고 있다.

# Java Platform
J2EE(Java2 Enterprise Edition) : 기업용 자바 어플리케이션
J2SE(Java2 Standard Edition) : 일반적인 자바 어플리케이션
J2ME(Java2 Mobile Edition) : 모바일 자바 어플리케이션

# Java 실행 과정
.java(소스코드) >>>컴파일>>> .class(목적코드, Byte코드) >>>실행>>> 기계어(Binary 코드)
                         javac.exe                                            java.exe(JVM)
* 목적코드로 한번 만들어서 기계어로 변환하는 과정을 한번 더 거치므로
   플랫폼 독립적(O/S가 무엇이든 상관없이)으로 실행이 가능하다.
   더 쉽게 얘기하면 한번 코드를 작성하면 어떤 O/S에서든 거의 동일한 작동을 한다.

# Java 컴파일/실행
* 컴파일 : javac -d . HelloWorld.java (-d옵션은 컴파일 결과로 만들어진 .class 파일의 위치)
* 실행 : java HelloWorld (-classpath옵션은 HelloWorld플 실행할때 필요한 클래스들의 위치)

# 변수(Variable)
* 메모리 영역에 대한 사람이 인식할 수 있는 이름
* C에서는 주소(Address), Java와 같은 객체지향프로그래밍 언어들은 주소에 대한 참조(Reference)를
  저장하기 위한 메모리에 대한 이름

# 변수의 타입(Type)
* 변수가 지칭하는(가리키는) 주소나 참조 위치에 저장할 데이터의 크기에 대한 이름
* 자바의 타입
  - 기본타입 (primitive type) : 8가지, 기본타입은 단일 값(scalar value)을 저장
    byte (정수, 1바이트) : -2^7 ~ 2^7-1
    short (정수, 2바이트) : -2^15 ~ 2^15-1
    int (정수, 4바이트) : -2^31 ~ 2^31-1
    long (정수, 8바이트) : -2^63 ~ 2^63-1
    float (실수, 4바이트) : ???
    double (실수, 8바이트) : ???
    boolean (불리언, 1바이트) : true, false
    char (문자, 2바이트 유니코드) : 'a'
  - 참조타입 (reference type)
* long(정수, 8바이트), float(실수, 4바이트) 어떤 것이 수의 표현범위가 클까?
  => 수의 바이트 배열방식이 달라서 표현범위는 float가 더 큼
* char는 전세계 문자들을 표현하기 위해 2바이트 유니코드를 사용
* boolean타입은 다른 어떤 타입으로도 형변환이 불가
* 자바를 포함한 모든 프로그래밍언어에서의 실수연산은 완전 정확하진 않다(메모리 크기의 제한 때문)
  0.3 + 0.1의 결과가 0.4가 아닐 수 있다.

# 변수의 형변환(Type Casting)
* 기본타입의 형변환
  - 형변환이란 데이터가 다른 타입으로 변환되는 것 (byte b = 100 > int)
  - 형변환에서 가장 핵심은 데이터의 손실(loss) 여부
  - 표현범위가 작은 타입에서 표현범위가 큰 타입으로 형변환은 데이터의 손실 가능성이 없다.
    그러므로 묵시적(자동)형변환 된다.
  - 표현범위가 큰 타입에서 표현범위가 작은 타입으로 형변환은 데이터의 손실 가능성이 있다.
    그러므로 명시적(강제)으로 형변환 해줘야 함
* 참조타입의 형변환

# 기본타입별 기본값
 * byte, short, int, long : int
 * float, double : double
 * 만약에 코드에 100 이라는 정수를 타이핑 했으면 기본적으로 int 처리
 * 만약에 코드에 0.3 이라는 실수를 타이핑 했으면 기본적으로 double 처리
 * 결론 : 모든 값에는 타입이 있다!!!
 * 100 => int, 100L => long, 0.3 => double, 0.3f => float
 * 최종결론 : 변수는 변수의 이름보다 타입이 훨씬 중요하다.

# 콘솔(console, 키보드+모니터) 입력 및 출력
 * java.util.Scanner
 * Scanner scanner = new Scanner(System.in); // 키보드입력스트림으로 Scanner 객체 생성
   int i = scanner.nextInt(); // 정수로 입력받아서 i변수에 저장
   System.out.println(i); // i변수의 값 출력

# 연산자 (operator)
  * 분류 (항의 개수)
   - 단항 : 항(operand)이 1개, -100
   - 이항 : 항이 2개, 10 + 20
   - 삼항 : 항이 3개, a==3 ? b=10 : c=10
  * 분류
   - 산술(+,-,*,/,%) : 수학적 연산
   - 논리(&, |, &&, ||, !) : true 또는 false
   - 대입(=) : 변수에 값을 할당(==대입, assignment)
   - 관계(>,>=,<,<=) : true 또는 false


































